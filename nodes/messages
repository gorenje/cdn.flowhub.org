{
    "@bartbutenaers/node-red-autolayout-sidebar/auto_layout_config": {},
    "@gdziuba/node-red-usbhid/usbhid": {},
    "@gorenje/node-red-mindmap/advantage": {},
    "@gorenje/node-red-mindmap/aphorism": {},
    "@gorenje/node-red-mindmap/art": {},
    "@gorenje/node-red-mindmap/author": {},
    "@gorenje/node-red-mindmap/base": {},
    "@gorenje/node-red-mindmap/blog-post": {},
    "@gorenje/node-red-mindmap/book": {},
    "@gorenje/node-red-mindmap/bookmark": {},
    "@gorenje/node-red-mindmap/codebase": {},
    "@gorenje/node-red-mindmap/comment": {},
    "@gorenje/node-red-mindmap/consequence": {},
    "@gorenje/node-red-mindmap/definition": {},
    "@gorenje/node-red-mindmap/disadvantage": {},
    "@gorenje/node-red-mindmap/dream": {},
    "@gorenje/node-red-mindmap/humour": {},
    "@gorenje/node-red-mindmap/idea": {},
    "@gorenje/node-red-mindmap/image": {},
    "@gorenje/node-red-mindmap/inspiration": {},
    "@gorenje/node-red-mindmap/learning": {},
    "@gorenje/node-red-mindmap/metaphor": {},
    "@gorenje/node-red-mindmap/observation": {},
    "@gorenje/node-red-mindmap/poesie": {},
    "@gorenje/node-red-mindmap/question": {},
    "@gorenje/node-red-mindmap/quote": {},
    "@gorenje/node-red-mindmap/text": {},
    "@gorenje/node-red-mindmap/thought": {},
    "@gorenje/node-red-mindmap/topic": {},
    "@gorenje/node-red-mindmap/treasure": {},
    "@gregoriusrippenstein/node-red-artworks/artwork": {
        "artwork": {
            "label": {
                "displayedat": "Displayed At",
                "imageurl": "Image Url",
                "size": "Size",
                "statusset": "Status Set",
                "title": "Title",
                "website": "Website"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/node-red-contacts/addressbook": {},
    "@gregoriusrippenstein/node-red-contacts/contact": {
        "contact": {
            "label": {
                "firstname": "First Name",
                "statusset": "Status Set",
                "surname": "Surname"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/node-red-contacts/emptycontact": {
        "emptycontact": {
            "label": {
                "statusset": "Status Set"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/node-red-contacts/generator": {
        "generator": {
            "label": {
                "statusset": "Status Set"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/node-red-contrib-aisbreaker/aisbreaker": {
        "aisbreaker": {
            "access_token": {
                "label": "Access Token",
                "placeholder": "< API access token/key/secret for AIsBreaker or AI service >"
            },
            "endpoint": {
                "label": "Server URL",
                "placeholder": "Service Endpoint"
            },
            "serviceid": {
                "chat_dummy": "Chat Dummy",
                "chat_echo_mirror": "Echo+Mirror Chat",
                "chat_google_gemini": "Google VertexAI Gemini",
                "chat_google_gemini_with_own_instance": "Google VertexAI Gemini (your instance @Google Cloud)",
                "chat_gtp_compatiable": "OpenAI ChatGPT compatible servers (e.g., Azure OpenAI GPT)",
                "chat_huggingface_co_any_model": "HuggingFace - Any Account, Any Model",
                "chat_huggingface_co_microsoft_dialogpt_large": "HuggingFace (MS DialoGPT) Large",
                "chat_huggingface_co_microsoft_dialogpt_small": "HuggingFace (MS DialoGPT) Small",
                "chat_openai_com": "OpenAI (default)",
                "chat_openai_com_gpt_3_5_turbo": "OpenAI (ChatGPT 3.5 Turbo)",
                "chat_openai_com_gpt_4": "OpenAI (ChatGPT 4)",
                "label": "Service",
                "own_json": "Define own Json",
                "text_to_image_dummy": "Text to Image (Dummy)",
                "text_to_image_openai_com": "OpenAI Text to Image",
                "text_to_image_stability_ai": "StabilityAI Text to Image"
            },
            "status": {
                "asking": "Asking...",
                "error": "Error Occurred"
            }
        }
    },
    "@gregoriusrippenstein/node-red-contrib-flow2uml/flowtomermaid": {},
    "@gregoriusrippenstein/node-red-contrib-flowcompare/flowcompare": {},
    "@gregoriusrippenstein/node-red-contrib-flowhub/flowhubcfg": {},
    "@gregoriusrippenstein/node-red-contrib-flowhub/flowhubpull": {},
    "@gregoriusrippenstein/node-red-contrib-introspection/clientcode": {},
    "@gregoriusrippenstein/node-red-contrib-introspection/getflows": {},
    "@gregoriusrippenstein/node-red-contrib-introspection/installpackage": {},
    "@gregoriusrippenstein/node-red-contrib-introspection/seeker": {},
    "@gregoriusrippenstein/node-red-contrib-introspection/sendflow": {},
    "@gregoriusrippenstein/node-red-contrib-introspection/sink": {},
    "@gregoriusrippenstein/node-red-contrib-nodedev/nodedevops": {},
    "@gregoriusrippenstein/node-red-contrib-nodedev/nodefactory": {},
    "@gregoriusrippenstein/node-red-contrib-nodedev/nodefactorycfg": {},
    "@gregoriusrippenstein/node-red-contrib-nodedev/noderedinstall": {},
    "@gregoriusrippenstein/node-red-contrib-nodedev/npmpublish": {},
    "@gregoriusrippenstein/node-red-contrib-nodedev/npmtarball": {},
    "@gregoriusrippenstein/node-red-contrib-nodedev/otpgenerator": {},
    "@gregoriusrippenstein/node-red-contrib-nodedev/pkgfile": {},
    "@gregoriusrippenstein/node-red-contrib-tarball/tarball": {
        "tarball": {
            "error": {
                "compressfailed": "tar creation failed",
                "formatnotsupported": "format not supported",
                "general": "error occurred",
                "nopayload": "no payload set on msg",
                "unknownpayload": "type of msg.payload is not supported",
                "untar": "error while untarring file",
                "xzcorrupt": "Lzma/Xz data corrupt"
            },
            "info": {
                "complete_archive": "archive complete",
                "complete_extraction": "extraction complete"
            }
        }
    },
    "@gregoriusrippenstein/node-red-contrib-uglifyjs/minifycss": {
        "minifycss": {
            "label": {
                "statusset": "Status Set"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            }
        }
    },
    "@gregoriusrippenstein/node-red-contrib-uglifyjs/uglifyjs": {},
    "@gregoriusrippenstein/node-red-contrib-validation-and-documentation/json-schema": {},
    "@gregoriusrippenstein/node-red-scratchpad/scratchpad": {},
    "@gregoriusrippenstein/node-red-streaming/archivestream": {
        "archivestream": {
            "error": {
                "dirname_not_defined": "Directory destination not specified",
                "failed_to_create_dir": "Failed to create '__directory__'"
            },
            "label": {
                "direction": "Direction",
                "format": "Format",
                "showprogress": "Show progress"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/chunk2msg": {
        "chunk2msg": {
            "error": {},
            "label": {
                "hello": "world"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/csvstream": {
        "csvstream": {
            "errors": {},
            "label": {
                "hello": "world"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/decompstream": {
        "decompstream": {
            "error": {
                "unknown_direction": "Action '__direction__' is not supported",
                "unknown_format": "Format '__format__' is not supported"
            },
            "label": {
                "format": "Format"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/filestream": {
        "filestream": {
            "errors": {},
            "label": {
                "direction": "Direction",
                "filename": "Filename",
                "showprogress": "Show Progress"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/httprequest": {
        "httprequeststream": {
            "error": {},
            "label": {
                "headers": "Request Headers",
                "ignore_header": "Ignore msg.headers",
                "ignore_request_timeout": "Ignore request Timeout?",
                "paytoqs": {
                    "body": "Post as body",
                    "ignore": "Ignore",
                    "query": "Add as query string"
                },
                "showprogress": "Show Progress"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/iconvstream": {
        "iconvstream": {
            "errors": {},
            "label": {
                "fromenc": "From encoding",
                "toenc": "To encoding"
            },
            "placeholder": {
                "fromenc": "ISO-8859-1",
                "toenc": "UTF-8"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/jsonlstream": {
        "jsonlstream": {
            "errors": {},
            "label": {
                "hello": "world"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/linestream": {
        "linestream": {
            "errors": {},
            "label": {
                "hello": "world"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/pipeend": {
        "pipeend": {
            "errors": {},
            "label": {
                "hello": "world"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@gregoriusrippenstein/node-red-streaming/pipestart": {
        "pipestart": {
            "errors": {},
            "label": {
                "hello": "world"
            },
            "status": {
                "timeout": "No more time to waiting",
                "waiting": "Waiting for Godot"
            },
            "tip": {}
        }
    },
    "@martip/node-red-xlsx/xlsx": {},
    "node-red-contrib-blockly/blockly": {},
    "node-red-contrib-blockly/blockly-config": {},
    "node-red-contrib-dnsquery/dnsquery": {},
    "node-red-contrib-duckdb/duckdb": {},
    "node-red-contrib-excel/xlsx": {},
    "node-red-contrib-fastxml/fastxml": {},
    "node-red-contrib-i2c/i2c": {},
    "node-red-contrib-image-output/image": {},
    "node-red-contrib-switch-break/switchBreak": {
        "label": {
            "defaultState": "Break by default",
            "input": "Input:",
            "master": "Director:",
            "name": "Name:",
            "onLock": "Break on:",
            "onUnlock": "Accept on:",
            "resend": "Re-send last message on unlock",
            "time": {
                "d": "days",
                "h": "hours",
                "m": "minutes",
                "ms": "milliseconds",
                "s": "seconds"
            },
            "timeOut": "Time out:",
            "useTimeOut": "Use timeout"
        },
        "node": {
            "master": "break director",
            "slave": "break actor"
        },
        "option": {
            "else": "otherwise"
        },
        "status": {
            "active": "active",
            "inactive": "inactive",
            "locked": "locked",
            "na": "untouched",
            "unlocked": "unlocked"
        },
        "text": {
            "name": "name",
            "unknown": "no director link"
        }
    },
    "node-red-contrib-ui-upload/ui_upload": {},
    "node-red-dashboard/ui_audio": {},
    "node-red-dashboard/ui_base": {
        "ui_base": {
            "auto": "auto",
            "base": {
                "colour": "Colour",
                "font": "Font"
            },
            "font": {
                "system": "System Font (default)"
            },
            "label": {
                "angular": "Angular",
                "category": "dashboard",
                "dashboard": "dashboard",
                "date-format": "Date Format",
                "group-padding": "Group Padding",
                "group-spacing": "Group Spacing",
                "horizontal": "Horizontal",
                "layout": "Layout",
                "options": "Options",
                "site": "Site",
                "sizes": "Sizes",
                "theme": "Theme",
                "title": "Title",
                "vertical": "Vertical",
                "widget-size": "1x1 Widget Size",
                "widget-spacing": "Widget Spacing"
            },
            "layout": {
                "auto": "auto-sizing",
                "edit": "edit",
                "group": "group",
                "layout": "layout",
                "layout-editor": "Dashboard layout editor",
                "link": "link",
                "manual": "manual resize",
                "spacer": "spacer",
                "tab": "tab",
                "tab-and-link": "Tabs & Links",
                "width": "Width"
            },
            "lock": {
                "clicked": "Click to show side menu",
                "locked": "Always show side menu",
                "locked-icon": "Always show icons only"
            },
            "site": {
                "date-format": "DD/MM/YYYY",
                "title": "Node-RED Dashboard"
            },
            "style": {
                "accents": "Accents",
                "background": "Background",
                "custom": "Custom",
                "dark": "Dark",
                "light": "Light (default)",
                "palette": "Light / Dark",
                "primary": "Primary",
                "warnings": "Warnings"
            },
            "swipe": {
                "allow-swipe": "Allow swipe between tabs",
                "allow-swipe-mouse": "Allow swipe (+mouse) between tabs",
                "no-swipe": "No swipe between tabs",
                "show-menu": "Swipe to open/close menu"
            },
            "temp": {
                "allow-theme": "Node-RED theme everywhere",
                "no-theme": "Use Angular theme in ui_template",
                "none": "Angular theme everywhere"
            },
            "theme": {
                "base-settings": "Base Settings",
                "custom-profile": "Custom Profile",
                "custom-profile-name": "Untitled Theme 1",
                "group": {
                    "background": "Group Background",
                    "border": "Group Border",
                    "text": "Group Text"
                },
                "group-settings": "Group Settings",
                "page": {
                    "page": "Page Background",
                    "side": "Side Bar Background",
                    "title": "Title Bar Background"
                },
                "page-settings": "Page Settings",
                "style": "Style",
                "widget": {
                    "background": "Widget Background",
                    "colour": "Widget Colour",
                    "text": "Widget Text"
                },
                "widget-settings": "Widget Settings"
            },
            "title": "Node-RED Dashboard",
            "title-bar": {
                "hide": "Hide the title bar",
                "show": "Show the title bar"
            }
        }
    },
    "node-red-dashboard/ui_button": {
        "ui_button": {
            "label": {
                "background": "Background",
                "className": "Class",
                "classNamePlaceholder": "Optional CSS class name(s) for widget",
                "color": "Color",
                "emulateClick": "If msg arrives on input, emulate a button click:",
                "group": "Group",
                "icon": "Icon",
                "label": "Label",
                "optionalBackgroundColor": "optional background color",
                "optionalColor": "optional text/icon color",
                "optionalIcon": "optional icon",
                "optionalLabel": "optional label",
                "optionalTooltip": "optional tooltip",
                "payload": "Payload",
                "size": "Size",
                "tooltip": "Tooltip",
                "topic": "Topic",
                "whenClicked": "When clicked, send:"
            }
        }
    },
    "node-red-dashboard/ui_chart": {
        "ui_chart": {
            "label": {
                "HHmm": "HH:mm",
                "HHmmss": "HH:mm:ss",
                "asUTC": "as UTC",
                "automatic": "automatic",
                "barChart": " &#xf080; Bar chart",
                "barChartH": " &#xf080; Bar chart (H)",
                "bezier": "bezier",
                "blankLabel": "Blank label",
                "className": "Class",
                "classNamePlaceholder": "Optional CSS class name(s) for widget",
                "cubic": "cubic",
                "cubicMono": "cubic-mono",
                "custom": "custom",
                "cutout": "Cutout",
                "dateMonth": "Date/Month",
                "dayHHmm": "Day HH:mm",
                "days": "days",
                "displayThisTextBeforeValidDataArrives": "display this text before valid data arrives",
                "enlargePoints": "enlarge points",
                "group": "Group",
                "hours": "hours",
                "interpolate": "Interpolate",
                "label": "Label",
                "last": "last",
                "legend": "Legend",
                "lineChart": " &#xf201; Line chart",
                "linear": "linear",
                "max": "max",
                "min": "min",
                "minutes": "minutes",
                "none": "None",
                "optionalChartTitle": "optional chart title",
                "or": "OR",
                "pieChart": " &#xf200; Pie chart",
                "points": "points",
                "polarAreaChart": " &#xf200; Polar area chart",
                "radarChart": " &#xf200; Radar chart",
                "seconds": "seconds",
                "seriesColours": "Series Colours",
                "show": "Show",
                "size": "Size",
                "step": "step",
                "type": "Type",
                "useDifferentColor": "Use different colour for series data",
                "useFirstColourForAllBars": "Use first colour for all bars",
                "weeks": "weeks",
                "xAxis": "X-axis",
                "xAxisLabel": "X-axis Label",
                "yAxis": "Y-axis",
                "yearMonthDate": "Year-Month-Date"
            }
        }
    },
    "node-red-dashboard/ui_colour_picker": {},
    "node-red-dashboard/ui_date_picker": {},
    "node-red-dashboard/ui_dropdown": {},
    "node-red-dashboard/ui_form": {
        "ui_form": {
            "label": {
                "buttons": "Buttons",
                "cancelButtonText": "cancel button text",
                "checkbox": "Checkbox",
                "className": "Class",
                "classNamePlaceholder": "Optional CSS class name(s) for widget",
                "date": "Date",
                "egName": "e.g. Name",
                "egName2": "e.g. name",
                "element": "element",
                "email": "E-mail",
                "formElements": "Form elements",
                "group": "Group",
                "label": "Label",
                "multiline": "Multiline",
                "number": "Number",
                "optionalLabel": "optional label",
                "optionalMsgTopic": "optional msg.topic",
                "password": "Password",
                "remove": "Remove",
                "required": "Required",
                "rows": "UiRows",
                "size": "Size",
                "splitLayout": "Place the form elements in two columns",
                "submitButtonText": "submit button text",
                "switch": "Switch",
                "text": "Text",
                "time": "Time",
                "topic": "Topic",
                "type": "Type"
            }
        }
    },
    "node-red-dashboard/ui_gauge": {},
    "node-red-dashboard/ui_group": {
        "ui_group": {
            "collapse-name": "Allow group to be collapsed",
            "display-name": "Display group name",
            "label": {
                "className": "Class",
                "classNamePlaceholder": "Optional CSS class name(s) for widget",
                "default": "Default",
                "group": "Group",
                "name": "Name",
                "tab": "Tab",
                "unassigned": "unassigned",
                "width": "Width"
            }
        }
    },
    "node-red-dashboard/ui_link": {
        "ui_link": {
            "label": {
                "className": "Class",
                "classNamePlaceholder": "Optional CSS class name(s) for widget",
                "icon": "Icon",
                "iframe": "iframe",
                "link": "Link",
                "name": "Name",
                "new-tab": "New Tab",
                "open-in": "Open in",
                "this-tab": "This Tab"
            },
            "tip": "The <b>Icon</b> field can be either a <a href=\"https://klarsys.github.io/angular-material-icons/\" target=\"_blank\">Material Design icon</a> <i>(e.g. 'check', 'close')</i> or a <a href=\"https://fontawesome.com/v4.7.0/icons/\" target=\"_blank\">Font Awesome icon</a> <i>(e.g. 'fa-fire')</i>, or a <a href=\"https://github.com/Paul-Reed/weather-icons-lite/blob/master/css_mappings.md\" target=\"_blank\">Weather icon</a> <i>(e.g. 'wi-wu-sunny')</i>.</p><p>You can use the full set of google material icons if you add 'mi-' to the icon name. e.g. 'mi-videogame_asset'.</p>"
        }
    },
    "node-red-dashboard/ui_numeric": {},
    "node-red-dashboard/ui_slider": {},
    "node-red-dashboard/ui_spacer": {},
    "node-red-dashboard/ui_switch": {},
    "node-red-dashboard/ui_tab": {
        "ui_tab": {
            "info": {
                "disabled": " Tab is inactive in Dashboard.",
                "hidden": " Tab is not shown in Navigation Menu."
            },
            "label": {
                "disabled": "Disabled",
                "enabled": "Enabled",
                "hidden": "Hidden",
                "home": "Home",
                "icon": "Icon",
                "name": "Name",
                "navmenu": "Nav. Menu",
                "state": "State",
                "tab": "Tab",
                "visible": "Visible"
            },
            "tip": "The <b>Icon</b> field can be either a <a href=\"https://klarsys.github.io/angular-material-icons/\" target=\"_blank\">Material Design icon</a> <i>(e.g. 'check', 'close')</i> or a <a href=\"https://fontawesome.com/v4.7.0/icons/\" target=\"_blank\">Font Awesome icon</a> <i>(e.g. 'fa-fire')</i>, or a <a href=\"https://github.com/Paul-Reed/weather-icons-lite/blob/master/css_mappings.md\" target=\"_blank\">Weather icon</a> <i>(e.g. 'wi-wu-sunny')</i>.</p><p>You can use the full set of google material icons if you add 'mi-' to the icon name. e.g. 'mi-videogame_asset'.</p>"
        }
    },
    "node-red-dashboard/ui_template": {
        "ui_template": {
            "label": {
                "className": "Class",
                "classNamePlaceholder": "Optional CSS class name(s) for widget",
                "expand": "Expand",
                "global": "Added to site <head> section",
                "group": "Group",
                "local": "Widget in group",
                "name": "Name",
                "pass-through": "Pass through messages from input.",
                "resend": "Reload last value on refresh.",
                "size": "Size",
                "store-state": "Add output messages to stored state.",
                "template": "Template",
                "type": "Template type"
            }
        }
    },
    "node-red-dashboard/ui_text": {},
    "node-red-dashboard/ui_text_input": {},
    "node-red-dashboard/ui_toast": {},
    "node-red-dashboard/ui_ui_control": {
        "ui_ui_control": {
            "events": {
                "all": "Connect, lost, change tab or group events",
                "change": "Change tab or group events only",
                "connect": "Connect event only"
            },
            "label": {
                "name": "Name",
                "output": "Output"
            },
            "placeholder": {
                "name": "Name"
            }
        }
    },
    "node-red-node-base64/base64": {
        "base64": {
            "base64": "base64",
            "convert": {
                "buffer": "Convert Buffer <-> Base64",
                "decode": "Convert Base64 to String",
                "encode": "Encode as Base64"
            },
            "error": {
                "invalid": "Invalid Base64 string",
                "nonbase64": "Not a Base64 string"
            },
            "label": {
                "action": "Action"
            },
            "log": {
                "nonbase64encode": "Not a Base64 string - maybe we should encode it..."
            },
            "warn": {
                "cannothandle": "This node only handles strings or buffers.",
                "noproperty": "No property found to process"
            }
        }
    },
    "node-red-node-pi-gpio/rpi-gpio": {
        "rpi-gpio": {
            "alreadyset": "already set as",
            "alreadyuse": "already in use",
            "any": "any",
            "digout": "Digital output",
            "errors": {
                "alreadyset": "GPIO pin __pin__ already set as type: __type__",
                "commandnotexecutable": "nrgpio command not executable ",
                "commandnotfound": "nrgpio command not found ",
                "error": "error: __error__",
                "ignorenode": "Raspberry Pi specific node set inactive",
                "invalidinput": "Invalid input",
                "invalidpin": "Invalid GPIO pin",
                "libnotfound": "Cannot find Pi RPi.GPIO python library",
                "mustbeexecutable": "nrgpio must to be executable",
                "needtobeexecutable": "__command__ needs to be executable",
                "pythoncommandnotfound": "nrgpio python command not running",
                "sawpitype": "Saw Pi Type",
                "version": "Failed to get version from Pi"
            },
            "initpin0": "initial level of pin - low (0)",
            "initpin1": "initial level of pin - high (1)",
            "label": {
                "button": "Button",
                "debounce": "Debounce",
                "freq": "Frequency",
                "gpiopin": "GPIO",
                "initpin": "Initialise pin state?",
                "left": "Left",
                "middle": "Middle",
                "pikeyboard": "Pi Keyboard",
                "pimouse": "Pi Mouse",
                "readinitial": "Read initial state of pin on deploy/restart?",
                "resistor": "Resistor?",
                "right": "Right",
                "selectpin": "select pin",
                "type": "Type"
            },
            "left": "left",
            "middle": "middle",
            "pinname": "Pin",
            "pwmout": "PWM output",
            "resistor": {
                "none": "none",
                "pulldown": "pulldown",
                "pullup": "pullup"
            },
            "right": "right",
            "servo": "Servo output",
            "status": {
                "closed": "closed",
                "na": "N/A : __value__",
                "not-available": "not available",
                "not-running": "not running",
                "ok": "OK",
                "stopped": "stopped"
            },
            "tip": {
                "dig": "Tip: For digital output - input must be 0 or 1.",
                "in": "Tip: Only Digital Input is supported - input must be 0 or 1.",
                "pin": "<b>Pins in Use</b>: ",
                "pwm": "Tip: For PWM output - input must be between 0 to 100; setting high frequency might occupy more CPU than expected.",
                "ser": "<b>Tip</b>: For Servo output - input must be between 0 to 100. 50 is centre."
            },
            "types": {
                "digout": "digital output",
                "input": "input",
                "pulldown": "input with pull down",
                "pullup": "input with pull up",
                "pwmout": "PWM output",
                "servo": "Servo output"
            }
        }
    },
    "node-red-node-random/random": {
        "random": {
            "label": {
                "from": "From",
                "generate": "Generate",
                "highestNumber": "highest number",
                "lowestNumber": "lowest number",
                "realNumber": "a real number - floating point",
                "to": "To",
                "wholeNumber": "a whole number - integer"
            }
        }
    },
    "node-red-node-serialport/serialport": {
        "serial": {
            "addsplit": "Add character to output messages",
            "errors": {
                "badbaudrate": "Baudrate is invalid",
                "closed": "serial port __port__ closed",
                "disconnected": "serial port __port__ disconnected",
                "error": "serial port __port__ error: __error__",
                "list": "Failed to list ports. Please enter manually.",
                "missing-conf": "missing serial config",
                "serial-port": "serial port",
                "unexpected-close": "serial port __port__ closed unexpectedly"
            },
            "label": {
                "baudrate": "Baud Rate",
                "databits": "Data Bits",
                "deliver": "and deliver",
                "input": "Input",
                "ms": "ms",
                "none": "none",
                "output": "Output",
                "parity": "Parity",
                "request": "Request",
                "responsetimeout": "Default response timeout",
                "serial": "serial",
                "serialport": "Serial Port",
                "settings": "Settings",
                "split": "Split input",
                "start": "Optionally wait for a start character of",
                "startor": ", then",
                "stopbits": "Stop Bits"
            },
            "linestates": {
                "high": "High",
                "low": "Low",
                "none": "auto"
            },
            "onopen": "serial port __port__ opened at __baud__ baud __config__",
            "output": {
                "ascii": "ASCII strings",
                "binary": "binary buffers"
            },
            "parity": {
                "even": "Even",
                "mark": "Mark",
                "none": "None",
                "odd": "Odd",
                "space": "Space"
            },
            "placeholder": {
                "serialport": "for example: /dev/ttyUSB0/"
            },
            "split": {
                "character": "on the character",
                "lengths": "into fixed lengths of",
                "silent": "after a silence of",
                "timeout": "after a timeout of"
            },
            "status": {
                "stopped": "stopped",
                "timeout": "timeout",
                "waiting": "waiting"
            },
            "stopped": "__port__ stopped",
            "tip": {
                "addchar": "Tip: This character is added to every message sent out to the serial port. Usually \\r or \\n.",
                "count": "Tip: In count mode msg.count can override the configured count as long as it smaller than the configured value.",
                "responsetimeout": "Tip: The default response timeout can be overridden by setting msg.timeout.",
                "silent": "Tip: In line-silent mode timeout is restarted upon arrival of any character (i.e. inter-byte timeout).",
                "split": "Tip: the \"Split on\" character is used to split the input into separate messages. Can accept chars ($), escape codes (\\n), or hex codes (0x03).",
                "timeout": "Tip: In timeout mode timeout starts from arrival of first character.",
                "waitfor": "Tip: Optional. Leave blank to receive all data. Can accept chars ($), escape codes (\\n), or hex codes (0x02)."
            }
        }
    },
    "node-red-node-smooth/smooth": {},
    "node-red-node-ui-list/ui_list": {
        "ui_list": {
            "action": {
                "check": "checkbox to send changed item",
                "click": "click to send item",
                "menu": "menu to send selected item",
                "none": "no action",
                "switch": "switch to send changed item"
            },
            "error": {
                "no-group": "group not configured"
            },
            "label": {
                "action": "Action",
                "group": "Group",
                "html": "allow HTML in displayed text",
                "list": "List Type",
                "name": "Name",
                "size": "Size",
                "topic": "Topic"
            },
            "type": {
                "one": "Single-line",
                "three": "Multi-line - wide",
                "two": "Multi-line - narrow"
            }
        }
    }
}
